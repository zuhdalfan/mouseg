/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_SENT_H
#define Z_INCLUDE_SYSCALLS_SENT_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <zephyr/syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_sent_start_listening(const struct device * dev, uint8_t channel);

__pinned_func
static inline int sent_start_listening(const struct device * dev, uint8_t channel)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint8_t val; } parm1 = { .val = channel };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SENT_START_LISTENING);
	}
#endif
	compiler_barrier();
	return z_impl_sent_start_listening(dev, channel);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define sent_start_listening(dev, channel) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_SENT_START_LISTENING, sent_start_listening, dev, channel); 	syscall__retval = sent_start_listening(dev, channel); 	sys_port_trace_syscall_exit(K_SYSCALL_SENT_START_LISTENING, sent_start_listening, dev, channel, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_sent_stop_listening(const struct device * dev, uint8_t channel);

__pinned_func
static inline int sent_stop_listening(const struct device * dev, uint8_t channel)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint8_t val; } parm1 = { .val = channel };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_SENT_STOP_LISTENING);
	}
#endif
	compiler_barrier();
	return z_impl_sent_stop_listening(dev, channel);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define sent_stop_listening(dev, channel) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_SENT_STOP_LISTENING, sent_stop_listening, dev, channel); 	syscall__retval = sent_stop_listening(dev, channel); 	sys_port_trace_syscall_exit(K_SYSCALL_SENT_STOP_LISTENING, sent_stop_listening, dev, channel, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_sent_register_callback(const struct device * dev, uint8_t channel, struct sent_rx_callback_configs callback_configs);

__pinned_func
static inline int sent_register_callback(const struct device * dev, uint8_t channel, struct sent_rx_callback_configs callback_configs)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint8_t val; } parm1 = { .val = channel };
		union { uintptr_t x; struct sent_rx_callback_configs val; } parm2 = { .val = callback_configs };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_SENT_REGISTER_CALLBACK);
	}
#endif
	compiler_barrier();
	return z_impl_sent_register_callback(dev, channel, callback_configs);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define sent_register_callback(dev, channel, callback_configs) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_SENT_REGISTER_CALLBACK, sent_register_callback, dev, channel, callback_configs); 	syscall__retval = sent_register_callback(dev, channel, callback_configs); 	sys_port_trace_syscall_exit(K_SYSCALL_SENT_REGISTER_CALLBACK, sent_register_callback, dev, channel, callback_configs, syscall__retval); 	syscall__retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
